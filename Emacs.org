#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle .config/emacs/init.el
* Startup Performance

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.
Also, turn on =lexical-binding= for the init file!

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  ;; (add-hook 'emacs-startup-hook
  ;;           (lambda ()
  ;;             (message "*** Emacs loaded in %s with %d garbage collections."
  ;;                      (format "%.2f seconds"
  ;;                              (float-time
  ;;                               (time-subtract after-init-time before-init-time)))
  ;;                      gcs-done)))
#+end_src

* Package Management
** Set up straight.el

  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

    ;; Always use straight to install on systems other than Linux
    (setq straight-use-package-by-default (not (eq system-type 'gnu/linux)))

    ;; Use straight.el for use-package expressions
    (straight-use-package 'use-package)

    (setq use-package-always-ensure t)

    ;; Load the helper package for commands like `straight-x-clean-unused-repos'
    (require 'straight-x)
  #+end_src

** Setup =use-package= to use =straight= by default

#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
#+end_src

* Window Management
** Frame Scaling / Zooming
Default keybindings are =C+M+-= and =C+M+==
#+begin_src emacs-lisp
  (use-package default-text-scale
    :straight t
    :defer 1
    :config
    (default-text-scale-mode))
#+end_src

** Set Margins for Modes

#+begin_src emacs-lisp
  (defun hf/org-mode-visual-fill ()
    (setq visual-fill-column-width 110
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :straight t
    :defer t
    :hook (org-mode . hf/org-mode-visual-fill))
#+end_src

** Control Buffer Placement
 Emacs' default buffer placement algorithm is pretty disruptive if you like setting up window layouts a certain way in your workflow. The display-buffer-alist video controls this behavior and you can customize it to prevent Emacs from popping up new windows when you run commands.
#+begin_src emacs-lisp
  (setq display-buffer-base-action
        '(display-buffer-reuse-mode-window
          display-buffer-reuse-window
          display-buffer-same-window))

  ;; If a popup does happen, don't resize windows to be equal-sized
  (setq even-window-sizes nil)
#+end_src

** Window Selection with =ace-window=

#+begin_src emacs-lisp
  (use-package ace-window
    :bind (("M-o" . ace-window))
    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)
    :config
    (ace-window-display-mode 1))
#+end_src

** Window History with =winner-mode=

#+begin_src emacs-lisp
  (use-package winner
    :after evil
    :config
    (winner-mode)
    (define-key evil-window-map "u" 'winner-undo)
    (define-key evil-window-map "U" 'winner-redo))
#+end_src

* Mode Line
** Enable Mode Diminishing

#+begin_src emacs-lisp
  (use-package diminish
    :straight t)
#+end_src

** Doom Modeline

#+begin_src emacs-lisp
    ;; You must run (all-the-icons-install-fonts) one time after
    ;; installing this package!

    (use-package minions
      :straight t
      :hook (doom-modeline-mode . minions-mode))

    (use-package doom-modeline
  ;    :after eshell     ;; Make sure it gets hooked after eshell
      :straight t
      :hook (after-init . doom-modeline-init)
      :custom-face
      (mode-line ((t (:height 0.85))))
      (mode-line-inactive ((t (:height 0.85))))
      :custom
      (doom-modeline-height 20)
      (doom-modeline-bar-width 6)
      (doom-modeline-lsp t)
      (doom-modeline-github nil)
      (doom-modeline-mu4e nil)
      (doom-modeline-irc nil)
      (doom-modeline-minor-modes t)
      (doom-modeline-persp-name nil)
      (doom-modeline-buffer-file-name-style 'truncate-except-project)
      (doom-modeline-major-mode-icon nil))

#+end_src

* General Configuration
** User Interface
*** Minimal UI

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)


  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)       ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)
#+end_src

*** Improve scrolling

#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
    (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
    (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
    (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq use-dialog-box nil)
#+end_src

*** Enable and customize line numbers

#+begin_src emacs-lisp
  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

*** Enable Icons for richer UI
On initial installation of this package, run =(all-the-icons-install-fonts)=
#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :if (display-graphic-p))
#+end_src

** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :straight t
    :config
    (dashboard-setup-startup-hook))
#+end_src

** Theme

#+begin_src emacs-lisp
    (use-package doom-themes
        :straight t
        :defer t)
    (load-theme 'doom-gruvbox t)
    (doom-themes-visual-bell-config)
#+end_src

** Font

#+begin_src emacs-lisp
;
(set-face-attribute 'default nil
                    :font "Iosevka Term"
                    :weight 'light
                    :height 160)
; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil
                    :font "Iosevka Term"
                    :weight 'light
                    :height 160)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil
                    ;; :font "Cantarell"
                    :font "Liberation Sans"
                    :height 160
                    :weight 'light)
#+end_src

** TODO Workspaces

I need to set up the keybindings for it, using a transient keybindings framework like hydra or general.
Maybe I need to substitute this with bufler and burly.
#+begin_src emacs-lisp
  (use-package perspective
    :demand t
    :bind (("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
#+end_src

** Disable Built-in VC Package

#+begin_src emacs-lisp
(setq vc-handled-backends nil)
#+end_src

* Default Coding System

Avoid constant errors on Windows about the coding system by setting the default to UTF-8.
  #+begin_src emacs-lisp
(set-default-coding-systems 'utf-8)
  #+end_src

* Evil Mode
** Evil

#+begin_src emacs-lisp
    (use-package evil
      :straight t
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      (setq evil-respect-visual-line-mode t)
      (setq evil-undo-system 'undo-tree)
      :config
      (evil-mode 1)
      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal)
      )
  (use-package evil-tutor
    :straight t
    )
#+end_src

** Evil Collection

#+begin_src emacs-lisp
  (use-package evil-collection
    :straight t
    :after evil
    :init
    (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (setq evil-collection-mode-list
	  (remove 'lispy evil-collection-mode-list))
    (evil-collection-init))
#+end_src

** Server Mode

Start the Emacs server from this instance so that all =emacsclient= calls are routed here.

#+begin_src emacs-lisp

  (server-start)

#+end_src

* Editing Configuration
** Undo Tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :straight t
    :init (global-undo-tree-mode 1))
#+end_src

** Auto Save
#+begin_src emacs-lisp
                                        ; (run-with-timer 10 10 (lambda () (save-some-buffers t)))
  (use-package real-auto-save
    :straight t
    :hook (org-mode . real-auto-save-mode)
    :config
    (setq real-auto-save-interval 1)
    )
#+end_src

** Keybinding Panel

#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Tab Widths

#+begin_src emacs-lisp
  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
#+end_src

** Automatically Clean Whitespace

#+begin_src emacs-lisp
  (use-package ws-butler
    :straight t
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))
#+end_src

** Commenting Lines

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :straight t
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Highlight Cursor During Scrolling

#+begin_src emacs-lisp
    (use-package beacon
      :straight t
      :config (beacon-mode 1))
#+end_src

* Development
** Smart Parens

#+begin_src emacs-lisp
  (use-package smartparens
    :straight t
    :hook (prog-mode . smartparens-mode))

#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Rainbow Mode
Color strings get a corresponding background color.

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :straight t
    :defer t
    :hook (org-mode
           emacs-lisp-mode
           web-mode
           typescript-mode
           js2-mode))
#+end_src

** Treemacs

#+begin_src emacs-lisp
 (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                5000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  ;; (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  ;;   :after (treemacs)
  ;;   :ensure t
  ;;   :config (treemacs-set-scope-type 'Tabs))
#+end_src

** Minimap

#+begin_src emacs-lisp
  (use-package minimap
    :straight t)
#+end_src

* Keyboard Bindings

** ESC Cancels All

#+begin_src emacs-lisp 

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Rebind C-u

Since I let =evil-mode= take over =C-u= for buffer scrolling, I need to re-bind the =universal-argument= command to another key sequence.  I'm choosing =C-M-u= for this purpose.

#+begin_src emacs-lisp

  (global-set-key (kbd "C-M-u") 'universal-argument)

#+end_src

* Org Mode
  
  #+begin_src emacs-lisp
    (setq-default fill-column 80)
    (defun hf/org-mode-setup ()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (visual-line-mode 1)
      (auto-fill-mode 0)
      (setq evil-auto-indent nil)
      (diminish org-indent-mode))

    (straight-use-package '(org :type built-in))
  #+end_src
** Org =use-package= Call
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . hf/org-mode-setup)
    :config
    (setq org-ellipsis " "
          org-hide-emphasis-markers t
          org-src-fontify-natively t
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2
          org-hide-block-startup nil
          org-src-preserve-indentation nil
          org-startup-folded 'content
          org-cycle-separator-lines 2)

    ;(setq org-modules
     ; '(org-crypt
                                          ;    org-habit
     ;     org-bookmark
     ;     org-eshell
     ;     org-irc))

    (setq org-refile-targets '((nil :maxlevel . 1)
                               (org-agenda-files :maxlevel . 1)))

    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path t)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (ledger . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src
** Replace Stars With Bullets
#+begin_src emacs-lisp
  (use-package org-superstar
    :straight t
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Replace dots for lists
#+begin_src emacs-lisp :tangle no
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                                (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src
** Configure Org Headings
#+begin_src emacs-lisp
    ;; Increase the size of various headings
  (set-face-attribute 'org-document-title nil :font "Fantasque Sans Mono" :weight 'bold :height 1.5)

  (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Fantasque Sans Mono" :weight 'medium :height (cdr face)))

    ;; Make sure org-indent face is available
    (require 'org-indent)

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

    ;; Get rid of the background on column views
    (set-face-attribute 'org-column nil :background nil)
    (set-face-attribute 'org-column-title nil :background nil)
#+end_src

** Org Tempo
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  #+end_src
  
** Close Org Mode =use-package=  Block
#+begin_src emacs-lisp
  )
#+end_src

** Org TOC
#+begin_src emacs-lisp
  (use-package org-make-toc
    :straight t
    :hook (org-mode . org-make-toc-mode))
#+end_src

** Auto-show Markup Symbols
#+begin_src emacs-lisp
  (use-package org-appear
    :straight t
    :hook (org-mode . org-appear-mode))
#+end_src

* Completion System
** Preserve Minibuffer History

#+begin_src emacs-lisp
  (use-package savehist
    :straight t
    :config
    (setq history-length 25)
    (savehist-mode 1))
#+end_src
** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :bind(:map vertico-map
               ("C-j" . vertico-next)
               ("C-k" . vertico-previous)
               ("C-f" . vertico-exit)
               ;; :map minibuffer-local-map
               ;; ("M-h" . dw/minibuffer-backward-kill)
               )
    :custom
    (vertico-cycle t)
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :init
    (vertico-mode))
#+end_src

** Orderless

#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))
#+End_src
** Marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :straight t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src
**

** Consult

#+begin_src emacs-lisp
  (use-package consult
    :straight t)
#+end_src

** Icons in Completion UI

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :straight t)
#+end_src
